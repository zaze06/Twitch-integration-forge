buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'net.minecraftforge.gradle'

shadowJar {
    relocate 'org.apache.commons.lang.enum', 'me.alien.twitch.integration.lang'
}

reobf {
    shadowJar {}
}

group = 'Alien'
version = '1.0'

allprojects {
    repositories {
        //maven { url 'https://jitpack.io' }
    }
}

java {
    archivesBaseName = 'Twitch_integration'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: '1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'Twitch_integration'

            mods {
                twitch_integration {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'Twitch_integration'

            mods {
                twitch_integration {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'Twitch_integration'

            mods {
                twitch_integration {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/removed as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'twitch_integration', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                twitch_integration {
                    source sourceSets.main
                }
            }
        }

        all {
            lazyToken('minecraft_classpath') {
                configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    flatDir {
         dir 'libs'
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    mavenCentral()
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.18.2-40.0.52'

    //library 'com.github.twitch4j:twitch4j:1.9.0'

    // org.json json library
    library 'org.json:json:20220320'

    // mariadb sql library
    library 'org.mariadb.jdbc:mariadb-java-client:3.0.4'

    //library 'com.github.twitch4j:twitch4j:1.9.0'

    library(group: 'com.github.twitch4j', name: 'twitch4j', version: '1.9.0') {
        exclude group: "commons-lang"
    }
    library 'blank:commons-lang-2.6:2.6'

    // Twitch4J java twitch library
    /*library 'blank:twitch4j:1.9.0'
    library 'blank:twitch4j-auth:1.9.0'
    library 'blank:twitch4j-common:1.9.0'
    library 'blank:twitch4j-eventsub-common:1.9.0'
    library 'blank:twitch4j-extensions:1.9.0'
    library 'blank:twitch4j-helix:1.9.0'
    library 'blank:twitch4j-kraken:1.9.0'
    library 'blank:twitch4j-messaginginterface:1.9.0'
    library 'blank:twitch4j-pubsub:1.9.0'
    library 'blank:twitch4j-chat:1.9.0'
    library 'blank:twitch4j-graphql:1.9.0'

    library 'blank:credentialmanager-0.1.2:0.1.2'
    library 'blank:events4j-v0.2.0:v0.2.0'
    library 'com.github.philippheuer.events4j:events4j-handler-simple:0.10.0'
    library 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.4.0'
    library 'io.github.openfeign:feign-core:11.8'
    library 'javax.json:javax.json-api:1.1.4'
    library 'it.unimi.dsi:fastutil:8.5.8'
    library 'org.jetbrains:annotations:23.0.0'
    library 'com.github.philippheuer.events4j:events4j-core:0.10.0'
    library 'io.github.openfeign:feign-slf4j:11.8'
    library('com.netflix.archaius:archaius-core:0.6.0'){
        //exclude group: "commons-lang"
    }*/
    //library 'org.apache.commons:commons-lang3:3.12.0'
    //library 'blank:archaius-core-2.0.0-rc.7:2.0.0-rc.7'

    // Support library's for Twitch4J
    //library 'com.github.oshi:oshi-parent:6.1.6'
    //library 'org.apache.httpcomponents:httpcore-niossl:4.0-alpha6'
    //library 'org.slf4j:slf4j-parent:1.7.36'
    //library 'org.slf4j:slf4j-api:2.0.0-alpha7'
    //library 'plexus:plexus-utils:1.0.3'
    //library 'org.apache.commons:commons-configuration2:2.7'*/
    //library 'com.github.philippheuer.credentialmanager:credentialmanager:0.1.1'
    //library 'org.jline:jline:3.21.0'
    //library 'com.squareup.okhttp3:okhttp:5.0.0-alpha.6'
    //library 'com.fasterxml.jackson.core:jackson-core:2.13.2'

    runtimeOnly fg.deobf('curse.maven:configured-457570:3721946')
    //runtimeOnly fg.deobf('blank:OptiFine_1.18.2_HD_U_H7:H7')
    //implementation fg.deobf('blank:twitch4jLib-1.0:1.0')

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "twitch_integration",
                "Specification-Vendor"    : "Alien",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Alien",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
